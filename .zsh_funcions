#
#Javier Fernández Febrero
#

# Comando de axuda que mostra as funcions


axuda(){
echo ""
echo "-   extraer()"
echo "-   comprimir()"
echo "-   ipdocker()"
echo "-   commit()"
echo "-   apdf()"
echo "-   actualizar()"
echo "-   arrincar()"
echo "-   githubconfig()"
echo "-   gitlabconfig()"
echo "-   ff()"
echo "-   accesosDirectos()"
echo "-   wpscan --url https://target.tld/ --enumerate u (comproba webs wp)"

    
}

# Extrae casi todas as compresions

function extraer() {
    local  e i
 
    (($#)) || return
 
    for i; do
        c=''
        e=1
 
        if [[ ! -r $i ]]; then
            echo "$0: archivo de legible: \`$i'" >&2
            continue
        fi
 
        case $i in
        *.7z)  7z x $i 
        echo -e "Descomprimido";;
        *.Z)   uncompress $i 
        echo -e "Descomprimido";;
        *.bz2) bunzip2 $i 
        echo -e "Descomprimido";;
        *.exe) cabextract $i 
        echo -e "Descomprimido";;
		*.tar.gz) tar xzf $i
        echo -e "Descomprimido" ;;
		*.tgz) tar zxvf $i 
        echo -e "Descomprimido";;
        *.gz)  gunzip $i 
        echo -e "Descomprimido";;
        *.rar) unrar x $i 
        echo -e "Descomprimido";;
        *.xz)  unxz $i 
        echo -e "Descomprimido";;
        *.zip) unzip $i 
        echo -e "Descomprimido";;
        *)     echo "$0: A extension non se recoñeceu: \`$i'" >&2
               continue;;
        esac

    done
}

function comprimir() {
    tar_defecto(){
    tar -cvf fernandez_febrero_javier.tar $2
    }

    tar(){
          tar -cvf $1 $2
    }

    zip(){
    zip fernandez_febrero_javier $1
    }

    zip_normal(){
    zip fernandez_febrero_javier $1
    }

    Help(){
     # Display Help
       echo "comprime en zip e tar"
       echo
       echo "Syntax: scriptTemplate [-h|t|z]"
       echo "options:"
       echo "z     comprime en zip con nome de archico por defecto"
       echo "v     comprime en zip con nome de archico e a ruta"
       echo "n     comprime con tar debes indica nome e archivos"
       echo "t     comprime en tar con nome do archivo por defecto por defecto"
       echo
    }

    while getopts ":h,n,z,v,t" option; do
        case $option in
            h) #
                Help
                exit;;
            n)
                tar $1 $2
                exit
                ;;
            z)
                zip $1
                exit
                ;;
            v)
                zip_normal $1 $2
                exit
                ;;
            t)
                tar_defecto $1
                exit
                ;;
            \?) #
                echo "Error"
                exit;;
        esac
        done

     tar -cvf $1 $2
  
}

##
## Docker 
##

# Indica a ip do contenedor indicado

ipdocker(){

    docker inspect $1 | grep 'IPAddress' 
    # docker inspect --format '{{ .NetworkSettings.IPAddress }}' $1
    
}

edocker(){
    if [ docker exec -it $1 /bin/bash ];then
        echo " "
    else
        docker exec -it $1 /bin/sh
    fi
}



##
##

# fai un ADD e un COMMIt to texto que lle pasemos

commit(){
    git add .
    git commit -m $1
}


# converta a pdf o archivo que se lle pase

apdf(){

lowriter --convert-to pdf $1
    
}

iterm(){
    /Applications/iTerm.app/Contents/MacOS/./iTerm2 &

    if [$1]; then
        /Applications/iTerm.app/Contents/MacOS/./iTerm2 $1 &
    fi
}


actualizar(){

if [ $(uname) = "Linux" ];then
    sudo flatpak update -y
    sudo snap refresh
    sudo apt update
    sudo apt upgrade
fi

if [ $(uname) = "Darwin" ];then
   brew update
fi

    
}

arrincar(){

    cd ~/.$USER/Proxectos
    ls >> repos.txt

    cp repos.txt repos.txt.tmp 
    sed '$ d' repos.txt.tmp > repos.txt
    rm -f repos.txt.tmp


    echo "${GREEN}Comprobando repos activos${END}"


    while IFS= read -r line
    do
      cd ~/.$USER/Proxectos/$line
      git pull >> /dev/null
      echo "${GREEN}Baixaronse os novos cambios do repo $line${END}"
    done < repos.txt


    cd ~/.$USER/Proxectos
    rm repos.txt


    cd ~/.$USER/scripts/scripts
    git pull >> /dev/null
    echo "${GREEN}Baixaronse os novos cambios dos Scripts${END}"
    cd

        
}

githubconfig (){
    source $HOME/.$USER/scripts/scripts/funcions
    if [ $2  ];then
        git remote set-url origin https://${GHP2}@github.com/javierfdezfebrero/$1.git
    else
        git remote set-url origin https://${GHP}@github.com/fdezfebrero/$1.git
    fi
}

gitlabconfig (){
    source $HOME/.$USER/scripts/scripts/funcions
   
    git remote set-url origin https://Javier_token:${GHP_LAB}@gitlab.com/FFebrero/$1.git
    
}

ff(){
    ssh u106884634@access895375647.webspace-data.io -p 22
}

accesosDirectos(){
    echo "
    Para crear un archivo .desktop hemos de crear un documento en blanco ( fácil con Gedit, Nano, Kate o cualquier editor de textos básico) y escribir los siguientes campos:
   
[ Desktop Entry ]
Encoding = UTF- 8
Version = 1.0
Type = Application
Terminal = false
Exec = Dirección del archivo o ejecutable
Name= Nombre que recibirá la aplicación
Icon= Dirección del icono que vamos a utilizar

Copiar el archivo a la siguiente carpeta del sistema: ~/.local/share/applications

De nada, crack.

"


}